Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require("react-native");

var _reactRedux = require("react-redux");

var _blankPage = require("../blankPage2");

var _blankPage2 = babelHelpers.interopRequireDefault(_blankPage);

var _DrawBar = require("../DrawBar");

var _DrawBar2 = babelHelpers.interopRequireDefault(_DrawBar);

var _reactNavigation = require("react-navigation");

var _nativeBase = require("native-base");

var _reactNativeEasyGrid = require("react-native-easy-grid");

var _list = require("../../actions/list");

var _drawer = require("../../actions/drawer");

var _styles = require("./styles");

var _styles2 = babelHelpers.interopRequireDefault(_styles);

var Home = function (_Component) {
  babelHelpers.inherits(Home, _Component);

  function Home() {
    babelHelpers.classCallCheck(this, Home);
    return babelHelpers.possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).apply(this, arguments));
  }

  babelHelpers.createClass(Home, [{
    key: "newPage",
    value: function newPage(index) {
      this.props.setIndex(index);
      Actions.blankPage();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      console.log(DrawNav, "786785786");
      return _react2.default.createElement(
        _nativeBase.Container,
        { style: _styles2.default.container },
        _react2.default.createElement(
          _nativeBase.Header,
          null,
          _react2.default.createElement(
            _nativeBase.Left,
            null,
            _react2.default.createElement(
              _nativeBase.Button,
              {
                transparent: true,
                onPress: function onPress() {
                  DrawerNav.dispatch(_reactNavigation.NavigationActions.reset({
                    index: 0,
                    actions: [_reactNavigation.NavigationActions.navigate({ routeName: "Home" })]
                  }));
                  DrawerNav.goBack();
                }
              },
              _react2.default.createElement(_nativeBase.Icon, { active: true, name: "power" })
            )
          ),
          _react2.default.createElement(
            _nativeBase.Body,
            null,
            _react2.default.createElement(
              _nativeBase.Title,
              null,
              "Home"
            )
          ),
          _react2.default.createElement(
            _nativeBase.Right,
            null,
            _react2.default.createElement(
              _nativeBase.Button,
              {
                transparent: true,
                onPress: function onPress() {
                  return DrawerNav.navigate("DrawerOpen");
                }
              },
              _react2.default.createElement(_nativeBase.Icon, { active: true, name: "menu" })
            )
          )
        ),
        _react2.default.createElement(
          _nativeBase.Content,
          null,
          _react2.default.createElement(
            _reactNativeEasyGrid.Grid,
            { style: _styles2.default.mt },
            this.props.list.map(function (item, i) {
              return _react2.default.createElement(
                _reactNativeEasyGrid.Row,
                { key: i },
                _react2.default.createElement(
                  _reactNative.TouchableOpacity,
                  {
                    style: _styles2.default.row,
                    onPress: function onPress() {
                      return _this2.props.navigation.navigate("BlankPage", {
                        name: { item: item }
                      });
                    }
                  },
                  _react2.default.createElement(
                    _nativeBase.Text,
                    { style: _styles2.default.text },
                    item
                  )
                )
              );
            })
          )
        )
      );
    }
  }]);
  return Home;
}(_react.Component);

Home.navigationOptions = {
  header: null
};
Home.propTypes = {
  name: _react2.default.PropTypes.string,
  setIndex: _react2.default.PropTypes.func,
  list: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string),
  openDrawer: _react2.default.PropTypes.func
};


function bindAction(dispatch) {
  return {
    setIndex: function setIndex(index) {
      return dispatch((0, _list.setIndex)(index));
    },
    openDrawer: function openDrawer() {
      return dispatch((0, _drawer.openDrawer)());
    }
  };
}
var mapStateToProps = function mapStateToProps(state) {
  return {
    name: state.user.name,
    list: state.list.list
  };
};

var HomeSwagger = (0, _reactRedux.connect)(mapStateToProps, bindAction)(Home);
var DrawNav = (0, _reactNavigation.DrawerNavigator)({
  Home: { screen: HomeSwagger },
  BlankPage2: { screen: _blankPage2.default }
}, {
  contentComponent: function contentComponent(props) {
    return _react2.default.createElement(_DrawBar2.default, props);
  }
});
var DrawerNav = null;
DrawNav.navigationOptions = function (_ref) {
  var navigation = _ref.navigation;

  DrawerNav = navigation;
  return {
    header: null
  };
};
exports.default = DrawNav;