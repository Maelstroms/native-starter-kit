Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _Ionicons = require('react-native-vector-icons/Ionicons');

var _Ionicons2 = babelHelpers.interopRequireDefault(_Ionicons);

var _Dimensions$get = _reactNative.Dimensions.get('window'),
    width = _Dimensions$get.width,
    height = _Dimensions$get.height;

var CustomMultiPicker = function (_Component) {
  babelHelpers.inherits(CustomMultiPicker, _Component);

  function CustomMultiPicker(props) {
    babelHelpers.classCallCheck(this, CustomMultiPicker);

    var _this = babelHelpers.possibleConstructorReturn(this, (CustomMultiPicker.__proto__ || Object.getPrototypeOf(CustomMultiPicker)).call(this, props));

    _this.componentDidMount = function () {
      var selected = _this.props.selected;
      if (typeof selected === "object") {
        selected.map(function (select) {
          _this._onSelect(select);
        });
      } else {
        _this._onSelect(selected);
      }
    };

    _this._onSelect = function (item) {
      var selected = _this.state.selected;
      if (_this.props.multiple) {
        if (selected.indexOf(item) == -1) {
          selected.push(item);
          _this.setState({
            selected: selected
          });
        } else {
          selected = selected.filter(function (i) {
            return i != item;
          });
          _this.setState({
            selected: selected
          });
        }
      } else {
        if (selected.indexOf(item) == -1) {
          selected = [item];
          _this.setState({
            selected: selected
          });
        } else {
          selected = [];
          _this.setState({
            selected: selected
          });
        }
      }
      _this.props.callback(selected);
    };

    _this._onSearch = function (text) {
      _this.setState({
        searchText: text.length > 0 ? text.toLowerCase() : null
      });
    };

    _this._isSelected = function (item) {
      var selected = _this.state.selected;
      if (selected.indexOf(item) == -1) {
        return false;
      }
      return true;
    };

    _this.filterObjectByValue = function (obj, predicate) {
      return Object.keys(obj).filter(function (key) {
        return predicate(obj[key]);
      }).reduce(function (res, key) {
        return res[key] = obj[key], res;
      }, {});
    };

    _this.state = {
      pageWidth: _reactNative.Dimensions.get('window').width,
      pageHeight: _reactNative.Dimensions.get('window').height,
      searchText: null,
      selected: []
    };
    return _this;
  }

  babelHelpers.createClass(CustomMultiPicker, [{
    key: 'getNewDimensions',
    value: function getNewDimensions(event) {
      var pageHeight = event.nativeEvent.layout.height;
      var pageWidth = event.nativeEvent.layout.width;
      this.setState({
        pageHeight: pageHeight, pageWidth: pageWidth
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          options = _props.options,
          returnValue = _props.returnValue;

      var list = this.state.searchText ? this.filterObjectByValue(options, function (option) {
        return option.toLowerCase().includes(_this2.state.searchText);
      }) : options;
      var labels = Object.keys(list).map(function (i) {
        return list[i];
      });
      var values = Object.keys(list);
      return _react2.default.createElement(
        _reactNative.View,
        { onLayout: function onLayout(evt) {
            _this2.getNewDimensions(evt);
          } },
        this.props.search && _react2.default.createElement(
          _reactNative.View,
          { style: { flexDirection: 'row', height: 55 } },
          _react2.default.createElement(
            _reactNative.View,
            { style: { marginTop: 15, marginLeft: 15, backgroundColor: 'transparent' } },
            _react2.default.createElement(_Ionicons2.default, { name: 'ios-search-outline', color: this.props.iconColor, size: 25 })
          ),
          _react2.default.createElement(_reactNative.TextInput, {
            style: {
              width: this.state.pageWidth - 20,
              height: 35,
              margin: 0,
              marginTop: 10,
              marginLeft: -25,
              padding: 5,
              paddingLeft: 30,
              borderColor: this.props.iconColor,
              borderWidth: 1,
              borderRadius: 5
            },
            onChangeText: function onChangeText(text) {
              _this2._onSearch(text);
            },
            clearButtonMode: 'always',
            placeholder: this.props.placeholder,
            placeholderTextColor: this.props.placeholderTextColor,
            underlineColorAndroid: 'transparent'
          })
        ),
        _react2.default.createElement(
          _reactNative.ScrollView,
          {
            style: { padding: 5, height: this.props.scrollViewHeight }
          },
          labels.map(function (label, index) {
            var itemKey = returnValue == "label" ? label : values[index];
            return _react2.default.createElement(
              _reactNative.TouchableOpacity,
              {
                key: Math.round(Math.random() * 1000000),
                style: {
                  padding: 7,
                  marginTop: 0,
                  marginLeft: 2,
                  marginRight: 2,
                  marginBottom: 6,
                  backgroundColor: _this2.props.rowBackgroundColor,
                  height: _this2.props.rowHeight,
                  flexDirection: 'row',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  borderRadius: _this2.props.rowRadius
                },
                onPress: function onPress() {
                  _this2._onSelect(itemKey);
                }
              },
              _react2.default.createElement(
                _reactNative.Text,
                null,
                label
              ),
              _this2._isSelected(itemKey) ? _react2.default.createElement(_Ionicons2.default, { name: _this2.props.selectedIconName, color: _this2.props.iconColor, size: _this2.props.iconSize }) : _react2.default.createElement(_Ionicons2.default, { name: _this2.props.unselectedIconName, color: _this2.props.iconColor, size: _this2.props.iconSize })
            );
          })
        )
      );
    }
  }]);
  return CustomMultiPicker;
}(_react.Component);

exports.default = CustomMultiPicker;