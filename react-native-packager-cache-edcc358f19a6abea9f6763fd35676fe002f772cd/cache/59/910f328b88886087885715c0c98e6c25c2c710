Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require("react-native");

var _reactRedux = require("react-redux");

var _blankPage = require("../blankPage2");

var _blankPage2 = babelHelpers.interopRequireDefault(_blankPage);

var _reactNavigation = require("react-navigation");

var _nativeBase = require("native-base");

var _reactNativeEasyGrid = require("react-native-easy-grid");

var _styles = require("./styles");

var _styles2 = babelHelpers.interopRequireDefault(_styles);

var Survey = function (_Component) {
  babelHelpers.inherits(Survey, _Component);

  function Survey() {
    babelHelpers.classCallCheck(this, Survey);
    return babelHelpers.possibleConstructorReturn(this, (Survey.__proto__ || Object.getPrototypeOf(Survey)).apply(this, arguments));
  }

  babelHelpers.createClass(Survey, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      console.log(DrawNav, "786785786");
      console.log('PROPS');
      console.log(this.props);
      console.log('STATE');
      console.log(this.state);
      return _react2.default.createElement(
        _nativeBase.Container,
        null,
        _react2.default.createElement(
          _nativeBase.View,
          { style: _styles2.default.container },
          _react2.default.createElement(
            _nativeBase.Content,
            null,
            _react2.default.createElement(
              _nativeBase.View,
              { style: _styles2.default.bg },
              _react2.default.createElement(
                _reactNativeEasyGrid.Grid,
                { style: _styles2.default.mt },
                this.props.list.map(function (item, i) {
                  return _react2.default.createElement(
                    _reactNativeEasyGrid.Row,
                    { key: i },
                    _react2.default.createElement(
                      _reactNative.TouchableOpacity,
                      {
                        style: _styles2.default.row,
                        onPress: function onPress() {
                          return _this2.props.navigation.navigate("BlankPage", {
                            name: { item: item }
                          });
                        } },
                      _react2.default.createElement(
                        _nativeBase.Text,
                        { style: _styles2.default.text },
                        item
                      )
                    )
                  );
                })
              ),
              _react2.default.createElement(
                _nativeBase.Button,
                {
                  style: _styles2.default.btn,
                  onPress: function onPress() {
                    return _this2.props.navigation.navigate("Home");
                  } },
                _react2.default.createElement(
                  _nativeBase.Text,
                  null,
                  "Clear"
                )
              ),
              _react2.default.createElement(
                _nativeBase.Button,
                {
                  style: _styles2.default.btn,
                  onPress: function onPress() {
                    return _this2.props.navigation.navigate("Home");
                  } },
                _react2.default.createElement(
                  _nativeBase.Text,
                  null,
                  "Cancel"
                )
              )
            )
          )
        )
      );
    }
  }]);
  return Survey;
}(_react.Component);

Survey.navigationOptions = {
  header: null
};
Survey.numbers = [1, 2, 3, 4, 5];
Survey.list = ["Student", "Rotation", "Date Performed", "Prodedure Group", "Prodedure", "Diagnosis Group", "Diagnosis", "Case Location", "Role in Case", "Supervisor", "Patient Type", "Student Comments", "Alternate Experience", "Description of Alternate Experience"];


function bindAction(dispatch) {
  return {
    setIndex: function (_setIndex) {
      function setIndex(_x) {
        return _setIndex.apply(this, arguments);
      }

      setIndex.toString = function () {
        return _setIndex.toString();
      };

      return setIndex;
    }(function (index) {
      return dispatch(setIndex(index));
    })
  };
}
var mapStateToProps = function mapStateToProps(state) {
  return {
    name: state.user.name,
    list: ["Student", "Rotation", "Date Performed", "Prodedure Group", "Prodedure", "Diagnosis Group", "Diagnosis", "Case Location", "Role in Case", "Supervisor", "Patient Type", "Student Comments", "Alternate Experience", "Description of Alternate Experience"]
  };
};

var SurveySwagger = (0, _reactRedux.connect)(mapStateToProps, bindAction)(Survey);
var DrawNav = (0, _reactNavigation.DrawerNavigator)({
  Survey: { screen: SurveySwagger },
  BlankPage2: { screen: _blankPage2.default }
});
var DrawerNav = null;
DrawNav.navigationOptions = function (_ref) {
  var navigation = _ref.navigation;

  DrawerNav = navigation;
  return {
    header: null
  };
};
exports.default = DrawNav;